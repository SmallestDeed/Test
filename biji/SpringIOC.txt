SpringIOC
控制反转：对于对象的创建的控制反转了，之前是程序在自己需要的时候创建，现在改为Spring帮助创建，同一管理Bean
DI，依赖注入：就是Spring在程序需要其他依赖Bean的时候注入所需依赖

个人认为IOC包括DI，但不止是DI，应该还有依赖检查，自动装配，指定初始化方法和销毁方法等等。。。。

IOC主要就是对Bean的管理，使用容器类来管理Bean的创建销毁等
工厂类主要分为低级容器类BeanFactory和高级容器类ApplicationContext
BeanFactory主要功能就是创建Bean和获取Bean
ApplicationContext作为BeanFactory的子接口，除了创建和获取Bean，还有其他的高级功能，有个核心方法refresh，功能是刷新或装载所有的Bean；除次之外还有其他的功能，比如国际化，资源文件解析，接口回调，监听程序等等。。。

IOC初始化过程：
1.用户构造ApplicationContext的子类，
2.然后子类调用父类的refresh方法装载所有的Bean，这个方法是模板方法，调用了低级容器的方法加载所有的bean和properties到容器中，
3.低级容器加载成功后高级容器开始处理一些回调，比如后置处理器，注册监听器，发布事件，实例化单例的bean等等

applicationContext的子类包括：AnnotationConfigApplicationContext,ClassPathXmlApplicationContext等

高级容器可能有低级容器的属性，类似装饰器模式

IOC只要低级容器就可以完成
低级容器的IOC：1.加载配置文件解析成BeanDefinition放入Map中，2.getBean的时候拿出Class对象进行实例化，同时有依赖关系的话递归getBean完成依赖注入

