
java代码编译和执行过程主要分为三个机制：
1.java源码的编译机制
2.类的加载机制
3.类的执行机制
--------------------------------------------

一、java源码的编译由三个过程组成（javac）
1.分析和输入到符号表
2.注解处理
3.语义分析和生成class文件
--------------------------------------------
最后生成的class文件包括：
1.结构信息：包括class文件格式版本号及各部分的数量与大小信息
2.元数据：对应于java源码中声明与常量的信息。包含类/继承的超类/实现的接口的声明信息、域与方法声明信息和常量池
3.方法信息：对应java源码中的语句和表达式对应的信息。包括字节码、异常处理器表、求值栈与局部变量区大小、求值栈的类型记录、调试符号信息等


二、类加载机制
类加载是由类加载器完成的，类加载器大致分为4种：
1.BootStrapClassLoader核心类加载器：
	负责加载核心类，jre/lib/rt.jar下的所有类，由C++实现。
2.ExClassLoader扩展类加载器：
	负责加载java平台中扩展功能的类，jre/lib/ext/*.jar或-Djava.ext.dirs指定目录的jar包
3.AppClassLoader应用类加载器：
	负责加载classpath中指定的jar包及目录中的class
4.自定义ClassLoader自定义类加载器
	自定义类加载器加载指定的类

加载顺序是自下而上的检查是否有类加载器加载过该类，保证一个类只加载一次，如果到最上层bootstrapClassLoader都没有加载过该类的话，又自上而下的尝试去加载该类。
使用委托模型：类加载器有加载需求的时候，会先委托其父类按照其搜索路径去帮忙加载，父类找不到时才自己按照搜索路径去加载（防止自定义核心类的问题出现）

三、类执行机制
JVM是基于栈的体系结构来执行class字节码的。线程创建后都会产生程序计数器（pc）及栈（Stack），程序计数器用来存放执行的指令在方法中的偏移量；栈中存放一个个栈帧，栈帧又由局部变量区和操作数栈两部分组成，局部变量区用来存放方法中的局部变量和参数，操作数栈用来存放方法执行过程中产生的中间结果

类被加载到虚拟机内存到卸载出内存分为7个阶段：
加载，验证，准备，解析，初始化，使用，卸载






